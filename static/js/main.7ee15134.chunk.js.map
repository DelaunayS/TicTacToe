{"version":3,"sources":["components/startComponent.js","components/ChoiceX_O.js","components/InitializeBoard.js","components/ResultVerification.js","components/ResetGame.js","components/EmptySquare.js","components/Board.js","App.js","index.js"],"names":["StartComponent","props","className","type","onClick","onClickPlayer","onClickChoiceXorO","ChoiceXorO","InitializeBoard","countRound","playerWin","colorPlayerOne","colorPlayerTwo","gameOver","storeChoicePlayerOne","storeChoicePlayerTwo","i","square","document","getElementById","innerHTML","winningConditions","ResultValidation","array","winCondition","a","includes","b","c","ResetGame","pointPlayer1","pointPlayer2","EmptySquare","result","push","Board","Player1","choiceXorO","Player2","useState","setCountRound","setPlayerWin","setPointPlayer1","setPointPlayer2","setStoreChoicePlayerOne","setStoreChoicePlayerTwo","setColorPlayerOne","useEffect","setColorPlayerTwo","Timer","delay","timer","setTimeout","setGameOver","clearTimeout","p","onClickSquare","e","target","tempChoiceOne","tempChoiceTwo","numberOfPlayer","index","Math","ceil","random","length","squareOrdi","toString","id","App","setNumberOfPlayer","setChoiceXorO","value1","choice","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7ee15134.chunk.js","sourcesContent":["import React from \"react\";\n\n// Composant de la première page pour choisir le nombre de joueur(s)//\nfunction StartComponent(props) {\n     \n    const onClickOnePlayer = () =>{        \n        props.onClickPlayer('1player') \n        props.onClickChoiceXorO('')         \n    }\n\n    const onClickTwoPlayer = () =>{        \n        props.onClickPlayer('2players')  \n        props.onClickChoiceXorO('')\n    }\n\n    return(\n        <div className=\"container text-center\">\n            <h3 className=\"text-center my-5\">Combien de joueur(s) ?</h3>\n            \n            <div className=\"my-5 col \">               \n                <button \n                type=\"button\"\n                className=\"mx-auto btn btn-lg btn-outline-dark h5\"\n                onClick={onClickOnePlayer}>\n                    Un joueur\n                </button>\n            </div>\n            <div className=\"my-5 col\">               \n                <button \n                 type=\"button\"\n                className=\"mx-auto btn btn-lg btn-outline-dark h5\"\n                onClick={onClickTwoPlayer}>\n                    Deux joueurs\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default StartComponent","import React from 'react'\n\n// Composant pour choisir le symbole du joueur 1 (et du joueur 2)//\nfunction ChoiceXorO(props) {\n\n    return(\n        <div className=\"container text-center\">\n            <h3 className=\"my-5\">\n                <span className=\"text-primary mx-1\">Joueur 1 :</span> \n                <span className=\"text-dark mx-2\">O</span>\n                 ou  \n                <span className=\"text-dark mx-2\">X</span> \n                ?\n            </h3>\n            \n            <div className=\"my-5 col text-center\">               \n                <button className=\"mx-auto btn btn-lg btn-outline-dark h5\"\n                onClick={()=>props.onClickChoiceXorO(['O','X'])}>\n                    O\n                </button>\n            </div>\n            <div className=\"my-5 col\">               \n                <button className=\"mx-auto btn btn-lg btn-outline-dark h5\"\n                onClick={()=>props.onClickChoiceXorO(['X','O'])}>\n                    X\n                </button>\n            </div>\n        </div>\n    )\n    \n}\n\nexport default ChoiceXorO","//Initialise le composant Board\nconst InitializeBoard = (countRound,playerWin,colorPlayerOne,colorPlayerTwo,gameOver,storeChoicePlayerOne,storeChoicePlayerTwo) =>{\n    countRound(0)\n    playerWin('')\n    colorPlayerOne('bg-primary text-light')\n    colorPlayerTwo('bg-light text-danger')  \n    //chaque case récupère sa valeur \"nombre\" \n    for (let i=1;i<10;i++){\n        let square=document.getElementById(`Square${i}`)\n        square.innerHTML=i   \n        square.className='text-light'\n    }\n    storeChoicePlayerOne([])\n    storeChoicePlayerTwo([])\n    gameOver(false)    \n}\n\nexport default InitializeBoard","//Condition pour que la partie soit gagnée//\nconst winningConditions = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['1', '4', '7'],\n    ['2', '5', '8'],\n    ['3', '6', '9'],\n    ['1', '5', '9'],\n    ['3', '5', '7']\n];\n\n//Vérifie le résultat\nconst ResultValidation=(array,gameOver) =>{ \n   \n    for (let i = 0; i <= 7; i++) {\n        const winCondition = winningConditions[i];\n        let a=array.includes(winCondition[0])\n        let b=array.includes(winCondition[1])\n        let c=array.includes(winCondition[2])           \n\n        if (a===true && b===true && c===true){\n            document.getElementById(`Square${winCondition[0]}`).className='bg-success'\n            document.getElementById(`Square${winCondition[1]}`).className='bg-success'\n            document.getElementById(`Square${winCondition[2]}`).className='bg-success'\n            gameOver(true)\n            return true\n        }                \n    }\n}\n\nexport default ResultValidation","//Réinitialise l'app\nconst ResetGame =(props,countRound,playerWin,\n    colorPlayerOne,colorPlayerTwo,\n    gameOver,\n    storeChoicePlayerOne,storeChoicePlayerTwo,\n    pointPlayer1,pointPlayer2) =>{\n    \n    props.onClickPlayer('')\n    countRound(0)\n    playerWin('')\n    colorPlayerOne('bg-primary text-light')\n    colorPlayerTwo('bg-light text-danger')  \n    //chaque case récupère sa valeur \"nombre\" \n    for (let i=1;i<10;i++){\n        let square=document.getElementById(`Square${i}`)\n        square.innerHTML=i   \n        square.className='text-light'\n    }\n    storeChoicePlayerOne([])\n    storeChoicePlayerTwo([])\n    pointPlayer1(0)\n    pointPlayer2(0)\n    gameOver(false)  \n}\n\nexport default ResetGame\n\n","// Vérifie quelle case est libre\nconst EmptySquare =()=>{\n    let result=[]\n    for (let i=1;i<10;i++){\n        let square=document.getElementById(`Square${i}`)\n        if (square.innerHTML!=='X'&& square.innerHTML!=='O'){\n            result.push(i)\n        }        \n    }  \n    return result \n}\nexport default EmptySquare","import React, { useEffect, useState } from \"react\";\nimport InitializeBoard from \"./InitializeBoard\";\nimport ResultValidation from \"./ResultVerification\";\nimport ResetGame from \"./ResetGame\";\nimport EmptySquare from \"./EmptySquare\";\n\n//Composant affichant le board 3x3//\nfunction Board(props) {\n\n  //stocke le symbole du joueur 1\n  const Player1 = props.choiceXorO[0];\n  //stocke le symbole du joueur 2\n  const Player2 = props.choiceXorO[1];\n\n  //nombre de coups joués\n  const [countRound, setCountRound] = useState(0);\n\n  //Dis quel joueur a gagné\n  const [playerWin, setPlayerWin] = useState(\"\");\n\n  //nombre de point du joueur 1\n  const [pointPlayer1, setPointPlayer1] = useState(0);\n  //nombre de point du joueur 2\n  const [pointPlayer2, setPointPlayer2] = useState(0);\n  \n  // stocke les choix du joueur 1\n  const [storeChoicePlayerOne, setStoreChoicePlayerOne] = useState([]);\n  // stocke les choix du joueur 2const [storeChoicePlayerTwo,setStoreChoicePlayerTwo]=useState([])\n  const [storeChoicePlayerTwo, setStoreChoicePlayerTwo] = useState([]);\n\n  //gère la couleur de la div id=\"playerOne\" pour savoir si c'est son tour de jeu\n  const [colorPlayerOne, setColorPlayerOne] = useState(\"bg-primary text-light\");\n  useEffect(() => {\n    if (countRound % 2 !== 0) {\n      setColorPlayerOne(\"bg-light text-primary\");\n    } else {\n      setColorPlayerOne(\"bg-primary text-light\");\n    }\n  }, [countRound]);\n\n  //gère la couleur de la div id=\"playertwo\" pour savoir si c'est son tour de jeu\n  const [colorPlayerTwo, setColorPlayerTwo] = useState(\"bg-light text-dark\");\n  useEffect(() => {\n    if (countRound % 2 !== 0) {\n      setColorPlayerTwo(\"bg-danger text-light\");\n    } else if (countRound % 2 === 0 && countRound > 0) {\n      setColorPlayerTwo(\"bg-light text-danger\");\n    }\n  }, [countRound]);\n\n  //Permet de lancer InitializeBoard après un délai de 2 secondes\n  function Timer(delay) {\n    let timer = setTimeout(() => {\n      InitializeBoard(\n        setCountRound,\n        setPlayerWin,\n        setColorPlayerOne,\n        setColorPlayerTwo,\n        setGameOver,\n        setStoreChoicePlayerOne,\n        setStoreChoicePlayerTwo\n      );\n      clearTimeout(timer);\n    }, delay);\n  }\n\n  //gère l'état de la partie\n  const [gameOver, setGameOver] = useState(false);\n  useEffect(() => {\n    //si la partie est finie\n    if (gameOver) {\n      //si le joueur 1 gagne\n      if (countRound % 2 !== 0 && countRound > 4) {\n        setPlayerWin(\"Joueur 1 gagne\");\n        setPointPlayer1((p) => p + 1);\n        Timer(2000);\n\n        //si le joueur 2 gagne\n      } else if (countRound % 2 === 0 && countRound > 4) {\n        setPlayerWin(\"Joueur 2 gagne\");\n        setPointPlayer2((p) => p + 1);\n        Timer(2000);\n      }\n      //en cas d'égalité\n    } else if (!gameOver && countRound > 8) {\n      setPlayerWin(\"Egalité\");\n      Timer(2000);\n    }\n  }, [countRound, gameOver]);\n\n  //quand on clique sur une case//\n  const onClickSquare = (e) => {\n    //conditions pour que l'on puisse cliquer sur le board\n    if (e.target.innerHTML !== \"O\" && e.target.innerHTML !== \"X\" && !gameOver) {\n      setCountRound(countRound + 1);\n      var tempChoiceOne = [...storeChoicePlayerOne];\n      var tempChoiceTwo = [...storeChoicePlayerTwo];\n\n      // si c'est au tour du joueur 1\n      if (countRound % 2 === 0) {\n        tempChoiceOne.push(e.target.innerHTML);// stocke la case choisie\n        setStoreChoicePlayerOne(tempChoiceOne);\n        e.target.innerHTML = Player1; //ajoute le symbole du joueur\n        e.target.className = \"text-primary\"; // modifie la couleur du symbole\n        ResultValidation(tempChoiceOne, setGameOver); // on vérifie s'il y a gain\n\n        // si on joue contre l'ordinateur\n        if (\n          props.numberOfPlayer === \"1player\" &&\n          countRound < 8 &&\n          !ResultValidation(tempChoiceOne, setGameOver)\n        ) {\n          setCountRound((p) => p + 1);\n          // choisit l'index dans l'array des cases libres\n          const index =Math.ceil(Math.random() * EmptySquare().length-1);                 \n          // sélectionne la case avec l'id='Square[index]'\n          const squareOrdi = document.getElementById(\n            `Square${EmptySquare()[index]}`\n          );\n          tempChoiceTwo.push(EmptySquare()[index].toString());\n          setStoreChoicePlayerTwo(tempChoiceTwo);\n          squareOrdi.innerHTML = Player2;\n          squareOrdi.className = \"text-danger\";\n          ResultValidation(tempChoiceTwo, setGameOver);\n        }\n      }\n\n      // si c'est au tour du joueur 2 (humain) (idem que joueur 1)\n      else {\n        if (props.numberOfPlayer === \"2players\") {\n          tempChoiceTwo.push(e.target.innerHTML);\n          setStoreChoicePlayerTwo(tempChoiceTwo);\n          e.target.innerHTML = Player2;\n          e.target.className = \"text-danger\";\n          ResultValidation(tempChoiceTwo, setGameOver);\n        }\n      }\n    }\n  };\n\n  return (\n    <div className=\"text-center \">\n      <div className=\"container text-center\">\n        <div className=\"row m-3\">\n          <div\n            id=\"playerOne\"\n            className={`col-5 border border-dark ${colorPlayerOne}`}\n          >\n            joueur 1 : <span className=\"mx-1\">{props.choiceXorO[0]}</span>\n          </div>\n          <div className=\"col-2\"></div>\n          <div\n            id=\"playerTwo\"\n            className={`col-5 border border-dark ${colorPlayerTwo}`}\n          >\n            joueur 2 : <span className=\"mx-1\">{props.choiceXorO[1]}</span>\n          </div>\n        </div>\n      </div>\n      <div className=\"container w-75 text-center bg-dark border border-dark rounded-3 p-1\">\n        <table id=\"board\" className=\"bg-light\">\n          <tbody>\n            <tr>\n              <td id=\"Square1\" className=\"text-light\" onClick={onClickSquare}>\n                1\n              </td>\n              <td id=\"Square2\" className=\"text-light\" onClick={onClickSquare}>\n                2\n              </td>\n              <td id=\"Square3\" className=\"text-light\" onClick={onClickSquare}>\n                3\n              </td>\n            </tr>\n            <tr>\n              <td id=\"Square4\" className=\"text-light\" onClick={onClickSquare}>\n                4\n              </td>\n              <td id=\"Square5\" className=\"text-light\" onClick={onClickSquare}>\n                5\n              </td>\n              <td id=\"Square6\" className=\"text-light\" onClick={onClickSquare}>\n                6\n              </td>\n            </tr>\n            <tr>\n              <td id=\"Square7\" className=\"text-light\" onClick={onClickSquare}>\n                7\n              </td>\n              <td id=\"Square8\" className=\"text-light\" onClick={onClickSquare}>\n                8\n              </td>\n              <td id=\"Square9\" className=\"text-light\" onClick={onClickSquare}>\n                9\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n\n      <div className=\"container text-center\">\n        <div className=\"row\">\n          <div className=\"col m-3\">\n            <span className=\"p-2 m-2 h3 rounded-pill bg-primary text-light\">\n              {pointPlayer1}\n            </span>\n            <span className=\"p-2 m-2 h3 rounded-pill bg-danger text-light\">\n              {pointPlayer2}\n            </span>\n          </div>\n        </div>\n      </div>\n      <div className=\"container text-center\">\n        <div className=\"row\">\n          <div id=\"textPlayerWin\" className={`col-6 mx-auto h4 text-dark`}>\n            {playerWin}\n          </div>\n          <button\n            type=\"button\"\n            className=\"col-4 mx-auto btn btn-outline-secondary h5\"\n            onClick={() =>\n              ResetGame(\n                props,\n                setCountRound,\n                setPlayerWin,\n                setColorPlayerOne,\n                setColorPlayerTwo,\n                setGameOver,\n                setStoreChoicePlayerOne,\n                setStoreChoicePlayerTwo,\n                setPointPlayer1,\n                setPointPlayer2\n              )\n            }\n          >\n            Reset\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Board;\n","import React,{useState} from 'react'\nimport StartComponent from './components/startComponent';\nimport ChoiceXorO from './components/ChoiceX_O';\nimport Board from './components/Board';\n\nfunction App() {\n\n  const [numberOfPlayer,setNumberOfPlayer]=useState('')\n  const [choiceXorO,setChoiceXorO]=useState(['X','O'])  \n    \n  //récupère le nombre de joueur(s)\n  const onClickPlayer= (value1)=>{\n    setNumberOfPlayer(value1) \n  }\n\n  //récupère le choix du symbole pour le joueur 1\n  const onClickChoiceXorO=(choice)=>{\n    setChoiceXorO(choice)\n  }\n \n  return (\n    <div className=\"App bg-secondary\">  \n      <div className=\"AppContainer bg-light\">\n          {numberOfPlayer==='' && <StartComponent onClickPlayer={onClickPlayer} onClickChoiceXorO={onClickChoiceXorO}/>}\n          {choiceXorO==='' && <ChoiceXorO onClickChoiceXorO={onClickChoiceXorO}/>}\n          {(choiceXorO!=='' && numberOfPlayer!=='') && <Board choiceXorO={choiceXorO} onClickPlayer={onClickPlayer} numberOfPlayer={numberOfPlayer}/>}\n      </div>   \n    </div> \n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css' \nimport './scss/index.scss';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}